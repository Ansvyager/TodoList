{"version":3,"sources":["redux/todoSlice.js","components/AddTodoForm.js","components/TodoItem.js","components/TodoList.js","components/TotalCompleteItems.js","App.js","redux/store.js","index.js"],"names":["getTodosAsync","createAsyncThunk","a","fetch","response","ok","json","todos","todoSlice","createSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","payload","title","description","status","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","AddTodoForm","useState","setTitle","desc","setDesc","dispatch","useDispatch","onSubmit","event","preventDefault","className","type","placeholder","value","onChange","target","TodoItem","checked","onClick","TodoList","useSelector","useEffect","map","TotalCompleteItems","statusTodos","length","App","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b979c895.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/getTodosAsync\",\r\n  async () => {\r\n    const response = await fetch(\r\n      \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\"\r\n    );\r\n    if (response.ok) {\r\n      const todos = await response.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\n// export const addTodoAsync = createAsyncThunk(\r\n//   \"todos/addTodosAsync\",\r\n//   async (payload) => {\r\n//     const response = await fetch(\r\n//       \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\",\r\n//       {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"appliaction/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           title: payload.title,\r\n//           description: payload.description,\r\n//         }),\r\n//       }\r\n//     );\r\n//     if (response.ok) {\r\n//       const todo = await response.json();\r\n//       return { todo };\r\n//     }\r\n//   }\r\n// );\r\nexport const toggleCompleteAsync = createAsyncThunk('todos/complete')\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: action.payload.id,\r\n        title: action.payload.title,\r\n        description: action.payload.description,\r\n        status: true,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].status = action.payload.status;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getTodosAsync.pending]: (state, action) => {\r\n      console.log(\"fetching data...\");\r\n    },\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      return action.payload.todos;\r\n    },\r\n    // [addTodoAsync.fulfilled]: (state, action) => {\r\n    //   state.push(action.payload.todo);\r\n    // },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../redux/todoSlice\";\nconst AddTodoForm = () => {\n  const [title, setTitle] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  \n  const dispatch = useDispatch();\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    dispatch(\n      addTodo({\n        title: title,\n\t\t    description:desc,\n        \n      })\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <form onSubmit={onSubmit} className=\"form-inline mt-3 mb-3\">\n          <label className=\"sr-only\">Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control mb-2 mr-sm-2\"\n            placeholder=\"Add todo...\"\n            value={title}\n            onChange={(title) => setTitle(title.target.value)}\n\t\t\tid=\"title\"\n          />\n          <input\n            className=\"form-control mb-2 mr-sm-2\"\n            type=\"text\"\n            id=\"desc\"\n            placeholder=\"Description\"\n            value={desc}\n\t\t\t      onChange={(desc)=> setDesc(desc.target.value)}\n          />\n          <button type=\"submit\" className=\"btn btn-primary mb-2\">\n            Submit\n          </button>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default AddTodoForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleComplete, deleteTodo } from \"../redux/todoSlice\";\nconst TodoItem = ({ id, title, status, description }) => {\n  \n  const dispatch = useDispatch();\n\n  const handleComplete = () => {\n    dispatch(toggleComplete({ id: id, status: !status }));\n  };\n\n  const handleDelete = () => {\n    dispatch(deleteTodo({ id: id }));\n  };\n  return (\n      <li\n        className={`list-group-item ${status && \"list-group-item-success\"}`}>\n        <div className=\"d-flex justify-content-between\">\n          <span className=\"d-flex align-items-center\">\n            <input\n              type=\"checkbox\"\n              className=\"mr-3\"\n              checked={status}\n              onChange={handleComplete}\n            />\n            <div className=\"text d-flex flex-column\">\n              <div className=\"title\">{title}</div>\n              <div className=\"desc\">{description}</div>\n            </div>\n          </span>\n          <button onClick={handleDelete} className=\"btn btn-danger\">\n            Delete\n          </button>\n        </div>\n      </li>\n  );\n};\n\nexport default TodoItem;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport TodoItem from \"./TodoItem\";\nimport { getTodosAsync } from \"../redux/todoSlice\";\n\n\nconst TodoList = () => {\n\n\n  const dispatch = useDispatch();\n\n  const todos = useSelector((state) => state.todos);\n\n  useEffect(() => {\n    dispatch(getTodosAsync());\n  }, [dispatch]);\n\n  return (\n      <ul className=\"list-group\">\n        {todos.map((todo) => (\n          <TodoItem\n            id={todo.id}\n            title={todo.title}\n            description={todo.description}\n          />\n        ))}\n      </ul>\n  );\n};\n\nexport default TodoList;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nconst TotalCompleteItems = () => {\n  const statusTodos = useSelector((state) =>\n    state.todos.filter((todo) => todo.status === true)\n  );\n\n  return <h4 className=\"mt-3\">Total Complete Items: {statusTodos.length}</h4>;\n};\n\nexport default TotalCompleteItems;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AddTodoForm from './components/AddTodoForm';\nimport TodoList from './components/TodoList';\nimport TotalCompleteItems from './components/TotalCompleteItems';\n\nconst App = () => {\n\treturn (\n\t\t<div className='container bg-white p-4 mt-5'>\n\t\t\t<h1>Test Todo List</h1>\n\t\t\t<AddTodoForm />\n\t\t\t<TodoList />\n\t\t\t<TotalCompleteItems />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport todoReducer from \"./todoSlice\"\r\n\r\nexport default configureStore({\r\n    reducer:{\r\n        todos:todoReducer,\r\n    }\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}