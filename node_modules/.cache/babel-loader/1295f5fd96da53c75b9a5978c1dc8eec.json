{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const response = await fetch(\"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\");\n\n  if (response.ok) {\n    const todos = await response.json();\n    return {\n      todos\n    };\n  }\n});\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [{\n    id: 1,\n    title: \"todo1\",\n    desc: \"lorem1\",\n    completed: false\n  }, {\n    id: 2,\n    title: \"todo2\",\n    desc: \"lorem1\",\n    completed: false\n  }, {\n    id: 3,\n    title: \"todo3\",\n    desc: \"lorem1\",\n    completed: false\n  }],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        desc: action.payload.desc,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.fulfilled]: (state, action) => {\n      return action.payload.todos;\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/Andres/Desktop/react-redux-todo-app-master/starter/src/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","todoSlice","name","initialState","id","title","desc","completed","reducers","addTodo","state","action","newTodo","Date","now","payload","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","extraReducers","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,aAAa,GAAGD,gBAAgB,CAAC,qBAAD,EAAwB,YAAY;AACxE,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kEAD0B,CAA5B;;AAGA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD;AACF,CARqC,CAAtC;AAUA,MAAME,SAAS,GAAGR,WAAW,CAAC;AAC5BS,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,IAAI,EAAE,QAA/B;AAAyCC,IAAAA,SAAS,EAAE;AAApD,GADY,EAEZ;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,IAAI,EAAE,QAA/B;AAAyCC,IAAAA,SAAS,EAAE;AAApD,GAFY,EAGZ;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,IAAI,EAAE,QAA/B;AAAyCC,IAAAA,SAAS,EAAE;AAApD,GAHY,CAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdR,QAAAA,EAAE,EAAES,IAAI,CAACC,GAAL,EADU;AAEdT,QAAAA,KAAK,EAAEM,MAAM,CAACI,OAAP,CAAeV,KAFR;AAGdC,QAAAA,IAAI,EAAEK,MAAM,CAACI,OAAP,CAAeT,IAHP;AAIdC,QAAAA,SAAS,EAAE;AAJG,OAAhB;AAMAG,MAAAA,KAAK,CAACM,IAAN,CAAWJ,OAAX;AACD,KATO;AAURK,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMO,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYO,MAAM,CAACI,OAAP,CAAeX,EAArD,CAAd;AACAM,MAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaX,SAAb,GAAyBI,MAAM,CAACI,OAAP,CAAeR,SAAxC;AACD,KAbO;AAcRc,IAAAA,UAAU,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACY,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYO,MAAM,CAACI,OAAP,CAAeX,EAAlD,CAAP;AACD;AAhBO,GAPkB;AAyB5BmB,EAAAA,aAAa,EAAC;AACV,KAAC5B,aAAa,CAAC6B,SAAf,GAA2B,CAACd,KAAD,EAAQC,MAAR,KAAkB;AACzC,aAAOA,MAAM,CAACI,OAAP,CAAehB,KAAtB;AACH;AAHS;AAzBc,CAAD,CAA7B;AAgCA,OAAO,MAAM;AAAEU,EAAAA,OAAF;AAAWQ,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0CpB,SAAS,CAACwB,OAA1D;AACP,eAAexB,SAAS,CAACyB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\r\n  const response = await fetch(\r\n    \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\"\r\n  );\r\n  if (response.ok) {\r\n    const todos = await response.json();\r\n    return { todos };\r\n  }\r\n});\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [\r\n    { id: 1, title: \"todo1\", desc: \"lorem1\", completed: false },\r\n    { id: 2, title: \"todo2\", desc: \"lorem1\", completed: false },\r\n    { id: 3, title: \"todo3\", desc: \"lorem1\", completed: false },\r\n  ],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        desc: action.payload.desc,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers:{\r\n      [getTodosAsync.fulfilled]: (state, action) =>{\r\n          return action.payload.todos\r\n      }\r\n  }\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}