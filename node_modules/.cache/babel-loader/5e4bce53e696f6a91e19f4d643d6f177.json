{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const response = await fetch(\"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\");\n\n  if (response.ok) {\n    const todos = await response.json();\n    return {\n      todos\n    };\n  }\n});\nexport const addTodoAsync = createAsyncThunk(\"todos/addTodosAsync\", async payload => {\n  const response = await fetch(\"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"appliaction/json\"\n    },\n    body: JSON.stringify({\n      title: payload.title,\n      description: payload.description\n    })\n  });\n\n  if (response.ok) {\n    const todo = await response.json();\n    return {\n      todo\n    };\n  }\n});\nexport const toggleCompleteAsync = createAsyncThunk('');\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: action.payload.id,\n        title: action.payload.title,\n        description: action.payload.description,\n        status: 1\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.pending]: (state, action) => {\n      console.log(\"fetching data...\");\n    },\n    [getTodosAsync.fulfilled]: (state, action) => {\n      return action.payload.todos;\n    },\n    [addTodoAsync.fulfilled]: (state, action) => {\n      state.push(action.payload.todo);\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/Andres/Desktop/react-redux-todo-app-master/starter/src/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","addTodoAsync","payload","method","headers","body","JSON","stringify","title","description","todo","toggleCompleteAsync","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","status","push","toggleComplete","index","findIndex","completed","deleteTodo","filter","extraReducers","pending","console","log","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/getTodosAsync\",\r\n  async () => {\r\n    const response = await fetch(\r\n      \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\"\r\n    );\r\n    if (response.ok) {\r\n      const todos = await response.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\nexport const addTodoAsync = createAsyncThunk(\r\n  \"todos/addTodosAsync\",\r\n  async (payload) => {\r\n    const response = await fetch(\r\n      \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\",\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"appliaction/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: payload.title,\r\n          description: payload.description,\r\n        }),\r\n      }\r\n    );\r\n    if (response.ok) {\r\n      const todo = await response.json();\r\n      return { todo };\r\n    }\r\n  }\r\n);\r\nexport const toggleCompleteAsync = createAsyncThunk('')\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: action.payload.id,\r\n        title: action.payload.title,\r\n        description: action.payload.description,\r\n        status: 1,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getTodosAsync.pending]: (state, action) => {\r\n      console.log(\"fetching data...\");\r\n    },\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      return action.payload.todos;\r\n    },\r\n    [addTodoAsync.fulfilled]: (state, action) => {\r\n      state.push(action.payload.todo);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}