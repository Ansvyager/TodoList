{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getTodosAsync = createAsyncThunk(\"todos/getTodosAsync\", async () => {\n  const response = await fetch(\"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\");\n\n  if (response.ok) {\n    const todos = await response.json();\n    return {\n      todos\n    };\n  }\n});\nexport const addTodoAsync = createAsyncThunk(\"todos/addTodosAsync\");\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: action.payload.id,\n        title: action.payload.title,\n        description: action.payload.description,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  },\n  extraReducers: {\n    [getTodosAsync.fulfilled]: (state, action) => {\n      return action.payload.todos;\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/Andres/Desktop/react-redux-todo-app-master/starter/src/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","response","fetch","ok","todos","json","addTodoAsync","todoSlice","name","initialState","reducers","addTodo","state","action","newTodo","id","payload","title","description","completed","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","extraReducers","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGD,gBAAgB,CAC3C,qBAD2C,EAE3C,YAAY;AACV,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kEAD0B,CAA5B;;AAGA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB;AACA,WAAO;AAAED,MAAAA;AAAF,KAAP;AACD;AACF,CAV0C,CAAtC;AAYP,OAAO,MAAME,YAAY,GAAGP,gBAAgB,CAAC,qBAAD,CAArC;AAEP,MAAMQ,SAAS,GAAGT,WAAW,CAAC;AAC5BU,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEF,MAAM,CAACG,OAAP,CAAeD,EADL;AAEdE,QAAAA,KAAK,EAAEJ,MAAM,CAACG,OAAP,CAAeC,KAFR;AAGdC,QAAAA,WAAW,EAAEL,MAAM,CAACG,OAAP,CAAeE,WAHd;AAIdC,QAAAA,SAAS,EAAE;AAJG,OAAhB;AAMAP,MAAAA,KAAK,CAACQ,IAAN,CAAWN,OAAX;AACD,KATO;AAURO,IAAAA,cAAc,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMS,KAAK,GAAGV,KAAK,CAACW,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYF,MAAM,CAACG,OAAP,CAAeD,EAArD,CAAd;AACAH,MAAAA,KAAK,CAACU,KAAD,CAAL,CAAaH,SAAb,GAAyBN,MAAM,CAACG,OAAP,CAAeG,SAAxC;AACD,KAbO;AAcRM,IAAAA,UAAU,EAAE,CAACb,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACc,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACT,EAAL,KAAYF,MAAM,CAACG,OAAP,CAAeD,EAAlD,CAAP;AACD;AAhBO,GAHkB;AAqB5BY,EAAAA,aAAa,EAAE;AACb,KAAC3B,aAAa,CAAC4B,SAAf,GAA2B,CAAChB,KAAD,EAAQC,MAAR,KAAmB;AAC5C,aAAOA,MAAM,CAACG,OAAP,CAAeZ,KAAtB;AACD;AAHY;AArBa,CAAD,CAA7B;AA4BA,OAAO,MAAM;AAAEO,EAAAA,OAAF;AAAWU,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0ClB,SAAS,CAACsB,OAA1D;AACP,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getTodosAsync = createAsyncThunk(\r\n  \"todos/getTodosAsync\",\r\n  async () => {\r\n    const response = await fetch(\r\n      \"https://virtserver.swaggerhub.com/hanabyan/todo/1.0.0/to-do-list\"\r\n    );\r\n    if (response.ok) {\r\n      const todos = await response.json();\r\n      return { todos };\r\n    }\r\n  }\r\n);\r\nexport const addTodoAsync = createAsyncThunk(\"todos/addTodosAsync\");\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: action.payload.id,\r\n        title: action.payload.title,\r\n        description: action.payload.description,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getTodosAsync.fulfilled]: (state, action) => {\r\n      return action.payload.todos;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}