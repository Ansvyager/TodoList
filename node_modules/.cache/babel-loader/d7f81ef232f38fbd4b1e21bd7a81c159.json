{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nconst getTodosAsync = createAsyncThunk('todos/getTodosAsync');\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: [{\n    id: 1,\n    title: \"todo1\",\n    desc: \"lorem1\",\n    completed: false\n  }, {\n    id: 2,\n    title: \"todo2\",\n    desc: \"lorem1\",\n    completed: false\n  }, {\n    id: 3,\n    title: \"todo3\",\n    desc: \"lorem1\",\n    completed: false\n  }],\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        id: Date.now(),\n        title: action.payload.title,\n        desc: action.payload.desc,\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleComplete: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload.id);\n      state[index].completed = action.payload.completed;\n    },\n    deleteTodo: (state, action) => {\n      return state.filter(todo => todo.id !== action.payload.id);\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleComplete,\n  deleteTodo\n} = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["C:/Users/Andres/Desktop/react-redux-todo-app-master/starter/src/redux/todoSlice.js"],"names":["createSlice","createAsyncThunk","getTodosAsync","todoSlice","name","initialState","id","title","desc","completed","reducers","addTodo","state","action","newTodo","Date","now","payload","push","toggleComplete","index","findIndex","todo","deleteTodo","filter","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAEA,MAAMC,aAAa,GAAGD,gBAAgB,CAAC,qBAAD,CAAtC;AAEA,MAAME,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,CACZ;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,IAAI,EAAC,QAA9B;AAAwCC,IAAAA,SAAS,EAAE;AAAnD,GADY,EAEZ;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,IAAI,EAAC,QAA9B;AAAwCC,IAAAA,SAAS,EAAE;AAAnD,GAFY,EAGZ;AAAEH,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,KAAK,EAAE,OAAhB;AAAyBC,IAAAA,IAAI,EAAC,QAA9B;AAAwCC,IAAAA,SAAS,EAAE;AAAnD,GAHY,CAFc;AAO5BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1B,YAAMC,OAAO,GAAG;AACdR,QAAAA,EAAE,EAAES,IAAI,CAACC,GAAL,EADU;AAEdT,QAAAA,KAAK,EAAEM,MAAM,CAACI,OAAP,CAAeV,KAFR;AAGdC,QAAAA,IAAI,EAACK,MAAM,CAACI,OAAP,CAAeT,IAHN;AAIdC,QAAAA,SAAS,EAAE;AAJG,OAAhB;AAMAG,MAAAA,KAAK,CAACM,IAAN,CAAWJ,OAAX;AACD,KATO;AAURK,IAAAA,cAAc,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMO,KAAK,GAAGR,KAAK,CAACS,SAAN,CAAiBC,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYO,MAAM,CAACI,OAAP,CAAeX,EAArD,CAAd;AACAM,MAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaX,SAAb,GAAyBI,MAAM,CAACI,OAAP,CAAeR,SAAxC;AACD,KAbO;AAcRc,IAAAA,UAAU,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7B,aAAOD,KAAK,CAACY,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAAChB,EAAL,KAAYO,MAAM,CAACI,OAAP,CAAeX,EAAlD,CAAP;AACD;AAhBO;AAPkB,CAAD,CAA7B;AA2BA,OAAO,MAAM;AAAEK,EAAAA,OAAF;AAAWQ,EAAAA,cAAX;AAA2BI,EAAAA;AAA3B,IAA0CpB,SAAS,CAACsB,OAA1D;AACP,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nconst getTodosAsync = createAsyncThunk('todos/getTodosAsync')\r\n\r\nconst todoSlice = createSlice({\r\n  name: \"todos\",\r\n  initialState: [\r\n    { id: 1, title: \"todo1\", desc:\"lorem1\", completed: false },\r\n    { id: 2, title: \"todo2\", desc:\"lorem1\", completed: false },\r\n    { id: 3, title: \"todo3\", desc:\"lorem1\", completed: false },\r\n  ],\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      const newTodo = {\r\n        id: Date.now(),\r\n        title: action.payload.title,\r\n        desc:action.payload.desc,\r\n        completed: false,\r\n      };\r\n      state.push(newTodo);\r\n    },\r\n    toggleComplete: (state, action) => {\r\n      const index = state.findIndex((todo) => todo.id === action.payload.id);\r\n      state[index].completed = action.payload.completed;\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      return state.filter((todo) => todo.id !== action.payload.id);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, toggleComplete, deleteTodo } = todoSlice.actions;\r\nexport default todoSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}